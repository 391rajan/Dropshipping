import React, { useState, useEffect } from 'react';
import { Star, ThumbsUp, Heart, ArrowLeft, ArrowRight } from 'lucide-react';
import { useNavigate, useParams } from 'react-router-dom';
import { useStore } from '../context/StoreContext';
import { productAPI, reviewAPI, recentlyViewedAPI } from '../services/api';
import RelatedProducts from './RelatedProducts';

function ProductDetails() {
  const { id } = useParams();
  const navigate = useNavigate();
  const { wishlist, toggleWishlist, addToCart } = useStore();
  
  const [product, setProduct] = useState(null);
  const [selectedVariant, setSelectedVariant] = useState(null);
  const [selectedImage, setSelectedImage] = useState(0);
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showReviewForm, setShowReviewForm] = useState(false);
  const [reviewFormData, setReviewFormData] = useState({
    rating: 5,
    title: '',
    comment: ''
  });

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const productData = await productAPI.getById(id);
        setProduct(productData);
        
        // Log view in recently viewed
        await recentlyViewedAPI.add(id);
        
        // Fetch reviews
        const reviewsData = await reviewAPI.getProductReviews(id);
        setReviews(reviewsData);
        
        setError(null);
      } catch (err) {
        setError(err.message);
        if (err.response?.status === 404) {
          navigate('/404');
        }
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id, navigate]);

  const handleAddToCart = async () => {
    try {
      await addToCart({
        productId: product._id,
        quantity: 1,
        variantId: selectedVariant?._id
      });
      // Show success toast
    } catch (err) {
      setError(err.message);
    }
  };

  const handleSubmitReview = async (e) => {
    e.preventDefault();
    try {
      const newReview = await reviewAPI.create({
        productId: product._id,
        ...reviewFormData
      });
      
      setReviews([newReview, ...reviews]);
      setShowReviewForm(false);
      setReviewFormData({ rating: 5, title: '', comment: '' });
    } catch (err) {
      setError(err.message);
    }
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="animate-pulse">
          <div className="h-96 bg-gray-200 rounded-lg mb-8"></div>
          <div className="h-8 bg-gray-200 rounded w-3/4 mb-4"></div>
          <div className="h-6 bg-gray-200 rounded w-1/4 mb-8"></div>
          <div className="space-y-4">
            <div className="h-4 bg-gray-200 rounded w-full"></div>
            <div className="h-4 bg-gray-200 rounded w-5/6"></div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-red-500 text-center">
          <p>{error}</p>
          <button
            onClick={() => navigate(-1)}
            className="mt-4 px-4 py-2 bg-primary text-white rounded-lg"
          >
            Go Back
          </button>
        </div>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-center">
          <p>Product not found</p>
          <button
            onClick={() => navigate(-1)}
            className="mt-4 px-4 py-2 bg-primary text-white rounded-lg"
          >
            Go Back
          </button>
        </div>
      </div>
    );
  }

  const isInWishlist = wishlist.some(item => item._id === product._id);
  const images = product.images || [product.image];
  const currentVariant = selectedVariant || product;

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Product Gallery */}
        <div className="space-y-4">
          <div className="aspect-w-1 aspect-h-1 w-full overflow-hidden rounded-lg">
            <img
              src={images[selectedImage]}
              alt={product.name}
              className="h-full w-full object-cover object-center"
            />
          </div>
          <div className="grid grid-cols-4 gap-4">
            {images.map((image, idx) => (
              <button
                key={idx}
                onClick={() => setSelectedImage(idx)}
                className={`aspect-w-1 aspect-h-1 overflow-hidden rounded-lg ${
                  selectedImage === idx ? 'ring-2 ring-primary' : ''
                }`}
              >
                <img
                  src={image}
                  alt={`Product ${idx + 1}`}
                  className="h-full w-full object-cover object-center"
                />
              </button>
            ))}
          </div>
        </div>

        {/* Product Info */}
        <div className="space-y-6">
          <div>
            <h1 className="text-3xl font-bold text-primary">{product.name}</h1>
            <p className="text-xl text-accent mt-2">${currentVariant.price.toFixed(2)}</p>
          </div>

          {/* Rating */}
          <div className="flex items-center space-x-2">
            {[...Array(5)].map((_, idx) => (
              <Star
                key={idx}
                className={`w-5 h-5 ${
                  idx < Math.floor(product.rating)
                    ? 'text-yellow-400 fill-current'
                    : 'text-gray-300'
                }`}
              />
            ))}
            <span className="text-accent">({product.numReviews} reviews)</span>
          </div>

          {/* Description */}
          <p className="text-accent/80">{product.description}</p>

          {/* Variants */}
          {product.variants && product.variants.length > 0 && (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <label className="text-accent font-medium">Select Variant</label>
                <span className="text-sm text-accent/60">
                  {product.variants.length} options available
                </span>
              </div>
              <div className="grid grid-cols-2 gap-4">
                {product.variants.map((variant) => (
                  <button
                    key={variant._id}
                    onClick={() => setSelectedVariant(variant)}
                    disabled={variant.stockCount === 0}
                    className={`p-4 rounded-lg border ${
                      selectedVariant?._id === variant._id
                        ? 'border-primary bg-primary/10'
                        : 'border-accent/20 hover:border-primary'
                    } ${variant.stockCount === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}
                  >
                    <span className="block font-medium text-accent">
                      {variant.name}
                    </span>
                    <div className="flex justify-between items-center mt-1">
                      <span className="text-sm text-accent/60">
                        ${variant.price.toFixed(2)}
                      </span>
                      <span className={`text-xs px-2 py-1 rounded ${
                        variant.stockCount > 0 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {variant.stockCount > 0 ? `${variant.stockCount} left` : 'Out of Stock'}
                      </span>
                    </div>
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="flex items-center gap-4">
            <button
              onClick={handleAddToCart}
              disabled={!selectedVariant && product.variants?.length > 0}
              className="flex-1 bg-primary hover:bg-accent disabled:bg-gray-300 text-white font-semibold py-3 px-8 rounded-lg shadow transition-colors"
            >
              Add to Cart
            </button>
            
            <button
              onClick={() => toggleWishlist(product._id)}
              className="p-3 rounded-lg border border-accent/20 hover:border-primary transition-colors"
            >
              <Heart
                className={`w-6 h-6 ${
                  isInWishlist
                    ? 'text-red-500 fill-current'
                    : 'text-accent'
                }`}
              />
            </button>
          </div>

          {/* Stock Status */}
          <div className="mt-4">
            <div className="flex items-center justify-between">
              <span className="text-accent font-medium">Availability</span>
              <span className={`text-sm px-2 py-1 rounded ${
                currentVariant.stockCount > 0
                  ? 'bg-green-100 text-green-800'
                  : 'bg-red-100 text-red-800'
              }`}>
                {currentVariant.stockCount > 0 ? 'In Stock' : 'Out of Stock'}
              </span>
            </div>
            {currentVariant.stockCount > 0 && (
              <div className="mt-2 bg-gray-200 rounded-full h-2">
                <div
                  className="bg-primary h-2 rounded-full"
                  style={{
                    width: `${Math.min((currentVariant.stockCount / 100) * 100, 100)}%`
                  }}
                />
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Product Navigation */}
      <div className="flex justify-between items-center mt-8">
        {product.prevProduct && (
          <button
            onClick={() => navigate(`/product/${product.prevProduct._id}`)}
            className="flex items-center space-x-2 text-accent hover:text-primary transition-colors"
          >
            <ArrowLeft className="w-5 h-5" />
            <span>Previous Product</span>
          </button>
        )}
        {product.nextProduct && (
          <button
            onClick={() => navigate(`/product/${product.nextProduct._id}`)}
            className="flex items-center space-x-2 text-accent hover:text-primary transition-colors"
          >
            <span>Next Product</span>
            <ArrowRight className="w-5 h-5" />
          </button>
        )}
      </div>

      {/* Reviews */}
      <div className="mt-16">
        <div className="flex items-center justify-between mb-8">
          <h2 className="text-2xl font-bold text-primary">Customer Reviews</h2>
          {!showReviewForm && (
            <button
              onClick={() => setShowReviewForm(true)}
              className="bg-primary hover:bg-accent text-white font-semibold py-2 px-4 rounded-lg shadow transition-colors"
            >
              Write a Review
            </button>
          )}
        </div>

        {/* Review Form */}
        {showReviewForm && (
          <form onSubmit={handleSubmitReview} className="bg-white rounded-lg shadow p-6 mb-8 border border-accent/10">
            <div className="space-y-4">
              <div>
                <label className="block text-accent font-medium mb-1">Rating</label>
                <div className="flex space-x-2">
                  {[1, 2, 3, 4, 5].map((rating) => (
                    <button
                      key={rating}
                      type="button"
                      onClick={() => setReviewFormData(prev => ({ ...prev, rating }))}
                      className="focus:outline-none"
                    >
                      <Star
                        className={`w-6 h-6 ${
                          rating <= reviewFormData.rating
                            ? 'text-yellow-400 fill-current'
                            : 'text-gray-300'
                        }`}
                      />
                    </button>
                  ))}
                </div>
              </div>
              <div>
                <label className="block text-accent font-medium mb-1">Title</label>
                <input
                  type="text"
                  value={reviewFormData.title}
                  onChange={(e) => setReviewFormData(prev => ({ ...prev, title: e.target.value }))}
                  className="w-full px-4 py-2 rounded-lg border border-accent/20 focus:outline-none focus:ring-2 focus:ring-primary"
                  required
                />
              </div>
              <div>
                <label className="block text-accent font-medium mb-1">Review</label>
                <textarea
                  value={reviewFormData.comment}
                  onChange={(e) => setReviewFormData(prev => ({ ...prev, comment: e.target.value }))}
                  className="w-full px-4 py-2 rounded-lg border border-accent/20 focus:outline-none focus:ring-2 focus:ring-primary"
                  rows="4"
                  required
                />
              </div>
              <div className="flex justify-end space-x-4">
                <button
                  type="button"
                  onClick={() => setShowReviewForm(false)}
                  className="px-4 py-2 rounded-lg text-accent hover:bg-accent/10 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="bg-primary hover:bg-accent text-white font-semibold px-4 py-2 rounded-lg shadow transition-colors"
                >
                  Submit Review
                </button>
              </div>
            </div>
          </form>
        )}

        {/* Reviews List */}
        <div className="space-y-6">
          {reviews.map((review) => (
            <div key={review._id} className="bg-white rounded-lg shadow p-6 border border-accent/10">
              <div className="flex justify-between items-start">
                <div>
                  <div className="flex items-center space-x-2 mb-2">
                    {[...Array(5)].map((_, idx) => (
                      <Star
                        key={idx}
                        className={`w-4 h-4 ${
                          idx < review.rating
                            ? 'text-yellow-400 fill-current'
                            : 'text-gray-300'
                        }`}
                      />
                    ))}
                  </div>
                  <h3 className="font-semibold text-primary">{review.title}</h3>
                  <p className="text-sm text-accent/60 mt-1">
                    By {review.user.name} on {new Date(review.createdAt).toLocaleDateString()}
                  </p>
                </div>
                {review.verified && (
                  <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full font-medium">
                    Verified Purchase
                  </span>
                )}
              </div>
              <p className="mt-4 text-accent">{review.comment}</p>
              <div className="mt-4 flex items-center space-x-4">
                <button 
                  onClick={() => reviewAPI.markHelpful(review._id)}
                  className="flex items-center space-x-1 text-accent hover:text-primary transition-colors"
                >
                  <ThumbsUp className="w-4 h-4" />
                  <span className="text-sm">Helpful ({review.helpfulCount || 0})</span>
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Related Products */}
      <RelatedProducts products={product.relatedProducts || []} currentProductId={product._id} />
    </div>
  );
}

export default ProductDetails;
